// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/broker/rabbitmq/rabbitmq.go

// Package mock_rabbitmq is a generated GoMock package.
package mock_rabbitmq

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockRabbitMQ is a mock of RabbitMQ interface.
type MockRabbitMQ struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQMockRecorder
}

// MockRabbitMQMockRecorder is the mock recorder for MockRabbitMQ.
type MockRabbitMQMockRecorder struct {
	mock *MockRabbitMQ
}

// NewMockRabbitMQ creates a new mock instance.
func NewMockRabbitMQ(ctrl *gomock.Controller) *MockRabbitMQ {
	mock := &MockRabbitMQ{ctrl: ctrl}
	mock.recorder = &MockRabbitMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQ) EXPECT() *MockRabbitMQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRabbitMQ) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRabbitMQMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbitMQ)(nil).Close))
}

// Connect mocks base method.
func (m *MockRabbitMQ) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockRabbitMQMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRabbitMQ)(nil).Connect))
}

// Consume mocks base method.
func (m *MockRabbitMQ) Consume(context context.Context, topic string) (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", context, topic)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockRabbitMQMockRecorder) Consume(context, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockRabbitMQ)(nil).Consume), context, topic)
}

// Publish mocks base method.
func (m *MockRabbitMQ) Publish(context context.Context, routingKey string, event interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", context, routingKey, event)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitMQMockRecorder) Publish(context, routingKey, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitMQ)(nil).Publish), context, routingKey, event)
}

// Reconnect mocks base method.
func (m *MockRabbitMQ) Reconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconnect indicates an expected call of Reconnect.
func (mr *MockRabbitMQMockRecorder) Reconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockRabbitMQ)(nil).Reconnect))
}
