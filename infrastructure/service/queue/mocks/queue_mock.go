// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/service/queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// ConsumeData mocks base method.
func (m *MockQueueService) ConsumeData(ctx context.Context, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeData", ctx, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeData indicates an expected call of ConsumeData.
func (mr *MockQueueServiceMockRecorder) ConsumeData(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeData", reflect.TypeOf((*MockQueueService)(nil).ConsumeData), ctx, topic)
}

// PublishData mocks base method.
func (m *MockQueueService) PublishData(ctx context.Context, topic string, msg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishData", ctx, topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishData indicates an expected call of PublishData.
func (mr *MockQueueServiceMockRecorder) PublishData(ctx, topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishData", reflect.TypeOf((*MockQueueService)(nil).PublishData), ctx, topic, msg)
}
