// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/logistik/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "eko-car/domain/logistik/model"
	model0 "eko-car/domain/shared/model"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogistikRepository is a mock of LogistikRepository interface.
type MockLogistikRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogistikRepositoryMockRecorder
}

// MockLogistikRepositoryMockRecorder is the mock recorder for MockLogistikRepository.
type MockLogistikRepositoryMockRecorder struct {
	mock *MockLogistikRepository
}

// NewMockLogistikRepository creates a new mock instance.
func NewMockLogistikRepository(ctrl *gomock.Controller) *MockLogistikRepository {
	mock := &MockLogistikRepository{ctrl: ctrl}
	mock.recorder = &MockLogistikRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogistikRepository) EXPECT() *MockLogistikRepositoryMockRecorder {
	return m.recorder
}

// BulkInsertCounterRepository mocks base method.
func (m *MockLogistikRepository) BulkInsertCounterRepository(ctx context.Context, size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertCounterRepository", ctx, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertCounterRepository indicates an expected call of BulkInsertCounterRepository.
func (mr *MockLogistikRepositoryMockRecorder) BulkInsertCounterRepository(ctx, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertCounterRepository", reflect.TypeOf((*MockLogistikRepository)(nil).BulkInsertCounterRepository), ctx, size)
}

// CheckProductIdRepository mocks base method.
func (m *MockLogistikRepository) CheckProductIdRepository(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductIdRepository", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductIdRepository indicates an expected call of CheckProductIdRepository.
func (mr *MockLogistikRepositoryMockRecorder) CheckProductIdRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductIdRepository", reflect.TypeOf((*MockLogistikRepository)(nil).CheckProductIdRepository), ctx, id)
}

// CheckProductSKURepository mocks base method.
func (m *MockLogistikRepository) CheckProductSKURepository(ctx context.Context, sku string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductSKURepository", ctx, sku)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductSKURepository indicates an expected call of CheckProductSKURepository.
func (mr *MockLogistikRepositoryMockRecorder) CheckProductSKURepository(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductSKURepository", reflect.TypeOf((*MockLogistikRepository)(nil).CheckProductSKURepository), ctx, sku)
}

// DeleteProductRepository mocks base method.
func (m *MockLogistikRepository) DeleteProductRepository(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductRepository", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductRepository indicates an expected call of DeleteProductRepository.
func (mr *MockLogistikRepositoryMockRecorder) DeleteProductRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductRepository", reflect.TypeOf((*MockLogistikRepository)(nil).DeleteProductRepository), ctx, id)
}

// GetAndUpdateNumberNextRepository mocks base method.
func (m *MockLogistikRepository) GetAndUpdateNumberNextRepository(ctx context.Context, tx *sql.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndUpdateNumberNextRepository", ctx, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndUpdateNumberNextRepository indicates an expected call of GetAndUpdateNumberNextRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetAndUpdateNumberNextRepository(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndUpdateNumberNextRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetAndUpdateNumberNextRepository), ctx, tx)
}

// GetDocNumberRangeRepository mocks base method.
func (m *MockLogistikRepository) GetDocNumberRangeRepository(ctx context.Context) (model.NumberRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocNumberRangeRepository", ctx)
	ret0, _ := ret[0].(model.NumberRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocNumberRangeRepository indicates an expected call of GetDocNumberRangeRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetDocNumberRangeRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocNumberRangeRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetDocNumberRangeRepository), ctx)
}

// GetLastCounterRepository mocks base method.
func (m *MockLogistikRepository) GetLastCounterRepository(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCounterRepository", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCounterRepository indicates an expected call of GetLastCounterRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetLastCounterRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCounterRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetLastCounterRepository), ctx)
}

// GetProductByIdRepository mocks base method.
func (m *MockLogistikRepository) GetProductByIdRepository(ctx context.Context, id int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByIdRepository", ctx, id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByIdRepository indicates an expected call of GetProductByIdRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetProductByIdRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByIdRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetProductByIdRepository), ctx, id)
}

// GetProductBySKURepository mocks base method.
func (m *MockLogistikRepository) GetProductBySKURepository(ctx context.Context, sku string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBySKURepository", ctx, sku)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBySKURepository indicates an expected call of GetProductBySKURepository.
func (mr *MockLogistikRepositoryMockRecorder) GetProductBySKURepository(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBySKURepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetProductBySKURepository), ctx, sku)
}

// GetProductListsRepository mocks base method.
func (m *MockLogistikRepository) GetProductListsRepository(ctx context.Context, limit, offset int, sortby, search string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductListsRepository", ctx, limit, offset, sortby, search)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductListsRepository indicates an expected call of GetProductListsRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetProductListsRepository(ctx, limit, offset, sortby, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductListsRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetProductListsRepository), ctx, limit, offset, sortby, search)
}

// GetProductListsWithFiltersRepository mocks base method.
func (m *MockLogistikRepository) GetProductListsWithFiltersRepository(ctx context.Context, filter *model0.Filter, offset int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductListsWithFiltersRepository", ctx, filter, offset)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductListsWithFiltersRepository indicates an expected call of GetProductListsWithFiltersRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetProductListsWithFiltersRepository(ctx, filter, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductListsWithFiltersRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetProductListsWithFiltersRepository), ctx, filter, offset)
}

// GetTotalProductRepository mocks base method.
func (m *MockLogistikRepository) GetTotalProductRepository(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProductRepository", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProductRepository indicates an expected call of GetTotalProductRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetTotalProductRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProductRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetTotalProductRepository), ctx)
}

// GetTotalProductWithConditionsRepository mocks base method.
func (m *MockLogistikRepository) GetTotalProductWithConditionsRepository(ctx context.Context, conditions string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProductWithConditionsRepository", ctx, conditions)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProductWithConditionsRepository indicates an expected call of GetTotalProductWithConditionsRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetTotalProductWithConditionsRepository(ctx, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProductWithConditionsRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetTotalProductWithConditionsRepository), ctx, conditions)
}

// GetTotalProductWithFiltersRepository mocks base method.
func (m *MockLogistikRepository) GetTotalProductWithFiltersRepository(ctx context.Context, filter *model0.Filter) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProductWithFiltersRepository", ctx, filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProductWithFiltersRepository indicates an expected call of GetTotalProductWithFiltersRepository.
func (mr *MockLogistikRepositoryMockRecorder) GetTotalProductWithFiltersRepository(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProductWithFiltersRepository", reflect.TypeOf((*MockLogistikRepository)(nil).GetTotalProductWithFiltersRepository), ctx, filter)
}

// InsertProductRepository mocks base method.
func (m *MockLogistikRepository) InsertProductRepository(ctx context.Context, product model.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductRepository", ctx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProductRepository indicates an expected call of InsertProductRepository.
func (mr *MockLogistikRepositoryMockRecorder) InsertProductRepository(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductRepository", reflect.TypeOf((*MockLogistikRepository)(nil).InsertProductRepository), ctx, product)
}

// UpdateProductRepository mocks base method.
func (m *MockLogistikRepository) UpdateProductRepository(ctx context.Context, id int, update *model.UpdateProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductRepository", ctx, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductRepository indicates an expected call of UpdateProductRepository.
func (mr *MockLogistikRepositoryMockRecorder) UpdateProductRepository(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductRepository", reflect.TypeOf((*MockLogistikRepository)(nil).UpdateProductRepository), ctx, id, update)
}
