// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/car/feature/feature.go

// Package mock_feature is a generated GoMock package.
package mock_feature

import (
	model "eko-car/domain/car/model"
	model0 "eko-car/domain/shared/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCarFeature is a mock of CarFeature interface.
type MockCarFeature struct {
	ctrl     *gomock.Controller
	recorder *MockCarFeatureMockRecorder
}

// MockCarFeatureMockRecorder is the mock recorder for MockCarFeature.
type MockCarFeatureMockRecorder struct {
	mock *MockCarFeature
}

// NewMockCarFeature creates a new mock instance.
func NewMockCarFeature(ctrl *gomock.Controller) *MockCarFeature {
	mock := &MockCarFeature{ctrl: ctrl}
	mock.recorder = &MockCarFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarFeature) EXPECT() *MockCarFeatureMockRecorder {
	return m.recorder
}

// AddCarFeature mocks base method.
func (m *MockCarFeature) AddCarFeature(ctx context.Context, request *model.AddCarRequest) (model.AddedCarResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCarFeature", ctx, request)
	ret0, _ := ret[0].(model.AddedCarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCarFeature indicates an expected call of AddCarFeature.
func (mr *MockCarFeatureMockRecorder) AddCarFeature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCarFeature", reflect.TypeOf((*MockCarFeature)(nil).AddCarFeature), ctx, request)
}

// BulkCounterFeature mocks base method.
func (m *MockCarFeature) BulkCounterFeature(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCounterFeature", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCounterFeature indicates an expected call of BulkCounterFeature.
func (mr *MockCarFeatureMockRecorder) BulkCounterFeature(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCounterFeature", reflect.TypeOf((*MockCarFeature)(nil).BulkCounterFeature), ctx)
}

// DeleteCarFeature mocks base method.
func (m *MockCarFeature) DeleteCarFeature(ctx context.Context, id string) (model.DeletedCarResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarFeature", ctx, id)
	ret0, _ := ret[0].(model.DeletedCarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCarFeature indicates an expected call of DeleteCarFeature.
func (mr *MockCarFeatureMockRecorder) DeleteCarFeature(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarFeature", reflect.TypeOf((*MockCarFeature)(nil).DeleteCarFeature), ctx, id)
}

// GetListsCarWithFilters mocks base method.
func (m *MockCarFeature) GetListsCarWithFilters(ctx context.Context, filter *model0.Filter) (model.CarListsByFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListsCarWithFilters", ctx, filter)
	ret0, _ := ret[0].(model.CarListsByFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListsCarWithFilters indicates an expected call of GetListsCarWithFilters.
func (mr *MockCarFeatureMockRecorder) GetListsCarWithFilters(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListsCarWithFilters", reflect.TypeOf((*MockCarFeature)(nil).GetListsCarWithFilters), ctx, filter)
}

// GetCarFeature mocks base method.
func (m *MockCarFeature) GetCarFeature(ctx context.Context, id string) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarFeature", ctx, id)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarFeature indicates an expected call of GetCarFeature.
func (mr *MockCarFeatureMockRecorder) GetCarFeature(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarFeature", reflect.TypeOf((*MockCarFeature)(nil).GetCarFeature), ctx, id)
}

// GetCarListsFeature mocks base method.
func (m *MockCarFeature) GetCarListsFeature(ctx context.Context, queryRequest model0.QueryRequest) (model.CarLists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarListsFeature", ctx, queryRequest)
	ret0, _ := ret[0].(model.CarLists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarListsFeature indicates an expected call of GetCarListsFeature.
func (mr *MockCarFeatureMockRecorder) GetCarListsFeature(ctx, queryRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarListsFeature", reflect.TypeOf((*MockCarFeature)(nil).GetCarListsFeature), ctx, queryRequest)
}

// UpdateCarFeature mocks base method.
func (m *MockCarFeature) UpdateCarFeature(ctx context.Context, id string, request *model.UpdateCarRequest) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarFeature", ctx, id, request)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarFeature indicates an expected call of UpdateCarFeature.
func (mr *MockCarFeatureMockRecorder) UpdateCarFeature(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarFeature", reflect.TypeOf((*MockCarFeature)(nil).UpdateCarFeature), ctx, id, request)
}
