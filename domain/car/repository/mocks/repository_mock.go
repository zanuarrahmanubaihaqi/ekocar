// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/car/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "eko-car/domain/car/model"
	model0 "eko-car/domain/shared/model"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCarRepository is a mock of CarRepository interface.
type MockCarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCarRepositoryMockRecorder
}

// MockCarRepositoryMockRecorder is the mock recorder for MockCarRepository.
type MockCarRepositoryMockRecorder struct {
	mock *MockCarRepository
}

// NewMockCarRepository creates a new mock instance.
func NewMockCarRepository(ctrl *gomock.Controller) *MockCarRepository {
	mock := &MockCarRepository{ctrl: ctrl}
	mock.recorder = &MockCarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarRepository) EXPECT() *MockCarRepositoryMockRecorder {
	return m.recorder
}

// BulkInsertCounterRepository mocks base method.
func (m *MockCarRepository) BulkInsertCounterRepository(ctx context.Context, size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertCounterRepository", ctx, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertCounterRepository indicates an expected call of BulkInsertCounterRepository.
func (mr *MockCarRepositoryMockRecorder) BulkInsertCounterRepository(ctx, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertCounterRepository", reflect.TypeOf((*MockCarRepository)(nil).BulkInsertCounterRepository), ctx, size)
}

// CheckCarIdRepository mocks base method.
func (m *MockCarRepository) CheckCarIdRepository(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCarIdRepository", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCarIdRepository indicates an expected call of CheckCarIdRepository.
func (mr *MockCarRepositoryMockRecorder) CheckCarIdRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCarIdRepository", reflect.TypeOf((*MockCarRepository)(nil).CheckCarIdRepository), ctx, id)
}

// CheckCarSKURepository mocks base method.
func (m *MockCarRepository) CheckCarSKURepository(ctx context.Context, sku string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCarSKURepository", ctx, sku)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCarSKURepository indicates an expected call of CheckCarSKURepository.
func (mr *MockCarRepositoryMockRecorder) CheckCarSKURepository(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCarSKURepository", reflect.TypeOf((*MockCarRepository)(nil).CheckCarSKURepository), ctx, sku)
}

// DeleteCarRepository mocks base method.
func (m *MockCarRepository) DeleteCarRepository(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarRepository", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarRepository indicates an expected call of DeleteCarRepository.
func (mr *MockCarRepositoryMockRecorder) DeleteCarRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarRepository", reflect.TypeOf((*MockCarRepository)(nil).DeleteCarRepository), ctx, id)
}

// GetAndUpdateNumberNextRepository mocks base method.
func (m *MockCarRepository) GetAndUpdateNumberNextRepository(ctx context.Context, tx *sql.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndUpdateNumberNextRepository", ctx, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndUpdateNumberNextRepository indicates an expected call of GetAndUpdateNumberNextRepository.
func (mr *MockCarRepositoryMockRecorder) GetAndUpdateNumberNextRepository(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndUpdateNumberNextRepository", reflect.TypeOf((*MockCarRepository)(nil).GetAndUpdateNumberNextRepository), ctx, tx)
}

// GetDocNumberRangeRepository mocks base method.
func (m *MockCarRepository) GetDocNumberRangeRepository(ctx context.Context) (model.NumberRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocNumberRangeRepository", ctx)
	ret0, _ := ret[0].(model.NumberRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocNumberRangeRepository indicates an expected call of GetDocNumberRangeRepository.
func (mr *MockCarRepositoryMockRecorder) GetDocNumberRangeRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocNumberRangeRepository", reflect.TypeOf((*MockCarRepository)(nil).GetDocNumberRangeRepository), ctx)
}

// GetLastCounterRepository mocks base method.
func (m *MockCarRepository) GetLastCounterRepository(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCounterRepository", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCounterRepository indicates an expected call of GetLastCounterRepository.
func (mr *MockCarRepositoryMockRecorder) GetLastCounterRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCounterRepository", reflect.TypeOf((*MockCarRepository)(nil).GetLastCounterRepository), ctx)
}

// GetCarByIdRepository mocks base method.
func (m *MockCarRepository) GetCarByIdRepository(ctx context.Context, id int) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarByIdRepository", ctx, id)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarByIdRepository indicates an expected call of GetCarByIdRepository.
func (mr *MockCarRepositoryMockRecorder) GetCarByIdRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarByIdRepository", reflect.TypeOf((*MockCarRepository)(nil).GetCarByIdRepository), ctx, id)
}

// GetCarBySKURepository mocks base method.
func (m *MockCarRepository) GetCarBySKURepository(ctx context.Context, sku string) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarBySKURepository", ctx, sku)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarBySKURepository indicates an expected call of GetCarBySKURepository.
func (mr *MockCarRepositoryMockRecorder) GetCarBySKURepository(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarBySKURepository", reflect.TypeOf((*MockCarRepository)(nil).GetCarBySKURepository), ctx, sku)
}

// GetCarListsRepository mocks base method.
func (m *MockCarRepository) GetCarListsRepository(ctx context.Context, limit, offset int, sortby, search string) ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarListsRepository", ctx, limit, offset, sortby, search)
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarListsRepository indicates an expected call of GetCarListsRepository.
func (mr *MockCarRepositoryMockRecorder) GetCarListsRepository(ctx, limit, offset, sortby, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarListsRepository", reflect.TypeOf((*MockCarRepository)(nil).GetCarListsRepository), ctx, limit, offset, sortby, search)
}

// GetCarListsWithFiltersRepository mocks base method.
func (m *MockCarRepository) GetCarListsWithFiltersRepository(ctx context.Context, filter *model0.Filter, offset int) ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarListsWithFiltersRepository", ctx, filter, offset)
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarListsWithFiltersRepository indicates an expected call of GetCarListsWithFiltersRepository.
func (mr *MockCarRepositoryMockRecorder) GetCarListsWithFiltersRepository(ctx, filter, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarListsWithFiltersRepository", reflect.TypeOf((*MockCarRepository)(nil).GetCarListsWithFiltersRepository), ctx, filter, offset)
}

// GetTotalCarRepository mocks base method.
func (m *MockCarRepository) GetTotalCarRepository(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCarRepository", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCarRepository indicates an expected call of GetTotalCarRepository.
func (mr *MockCarRepositoryMockRecorder) GetTotalCarRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCarRepository", reflect.TypeOf((*MockCarRepository)(nil).GetTotalCarRepository), ctx)
}

// GetTotalCarWithConditionsRepository mocks base method.
func (m *MockCarRepository) GetTotalCarWithConditionsRepository(ctx context.Context, conditions string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCarWithConditionsRepository", ctx, conditions)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCarWithConditionsRepository indicates an expected call of GetTotalCarWithConditionsRepository.
func (mr *MockCarRepositoryMockRecorder) GetTotalCarWithConditionsRepository(ctx, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCarWithConditionsRepository", reflect.TypeOf((*MockCarRepository)(nil).GetTotalCarWithConditionsRepository), ctx, conditions)
}

// GetTotalCarWithFiltersRepository mocks base method.
func (m *MockCarRepository) GetTotalCarWithFiltersRepository(ctx context.Context, filter *model0.Filter) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCarWithFiltersRepository", ctx, filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCarWithFiltersRepository indicates an expected call of GetTotalCarWithFiltersRepository.
func (mr *MockCarRepositoryMockRecorder) GetTotalCarWithFiltersRepository(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCarWithFiltersRepository", reflect.TypeOf((*MockCarRepository)(nil).GetTotalCarWithFiltersRepository), ctx, filter)
}

// InsertCarRepository mocks base method.
func (m *MockCarRepository) InsertCarRepository(ctx context.Context, product model.Car) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCarRepository", ctx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCarRepository indicates an expected call of InsertCarRepository.
func (mr *MockCarRepositoryMockRecorder) InsertCarRepository(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCarRepository", reflect.TypeOf((*MockCarRepository)(nil).InsertCarRepository), ctx, product)
}

// UpdateCarRepository mocks base method.
func (m *MockCarRepository) UpdateCarRepository(ctx context.Context, id int, update *model.UpdateCarRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarRepository", ctx, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCarRepository indicates an expected call of UpdateCarRepository.
func (mr *MockCarRepositoryMockRecorder) UpdateCarRepository(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarRepository", reflect.TypeOf((*MockCarRepository)(nil).UpdateCarRepository), ctx, id, update)
}
