// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/user/feature/feature.go

// Package mock_feature is a generated GoMock package.
package mock_feature

import (
	model "eko-car/domain/user/model"
	model0 "eko-car/domain/shared/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserFeature is a mock of UserFeature interface.
type MockUserFeature struct {
	ctrl     *gomock.Controller
	recorder *MockUserFeatureMockRecorder
}

// MockUserFeatureMockRecorder is the mock recorder for MockUserFeature.
type MockUserFeatureMockRecorder struct {
	mock *MockUserFeature
}

// NewMockUserFeature creates a new mock instance.
func NewMockUserFeature(ctrl *gomock.Controller) *MockUserFeature {
	mock := &MockUserFeature{ctrl: ctrl}
	mock.recorder = &MockUserFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFeature) EXPECT() *MockUserFeatureMockRecorder {
	return m.recorder
}

// AddUserFeature mocks base method.
func (m *MockUserFeature) AddUserFeature(ctx context.Context, request *model.AddUserRequest) (model.AddedUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserFeature", ctx, request)
	ret0, _ := ret[0].(model.AddedUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserFeature indicates an expected call of AddUserFeature.
func (mr *MockUserFeatureMockRecorder) AddUserFeature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserFeature", reflect.TypeOf((*MockUserFeature)(nil).AddUserFeature), ctx, request)
}

// BulkCounterFeature mocks base method.
func (m *MockUserFeature) BulkCounterFeature(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCounterFeature", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCounterFeature indicates an expected call of BulkCounterFeature.
func (mr *MockUserFeatureMockRecorder) BulkCounterFeature(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCounterFeature", reflect.TypeOf((*MockUserFeature)(nil).BulkCounterFeature), ctx)
}

// DeleteUserFeature mocks base method.
func (m *MockUserFeature) DeleteUserFeature(ctx context.Context, id string) (model.DeletedUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFeature", ctx, id)
	ret0, _ := ret[0].(model.DeletedUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserFeature indicates an expected call of DeleteUserFeature.
func (mr *MockUserFeatureMockRecorder) DeleteUserFeature(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFeature", reflect.TypeOf((*MockUserFeature)(nil).DeleteUserFeature), ctx, id)
}

// GetListsUserWithFilters mocks base method.
func (m *MockUserFeature) GetListsUserWithFilters(ctx context.Context, filter *model0.Filter) (model.UserListsByFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListsUserWithFilters", ctx, filter)
	ret0, _ := ret[0].(model.UserListsByFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListsUserWithFilters indicates an expected call of GetListsUserWithFilters.
func (mr *MockUserFeatureMockRecorder) GetListsUserWithFilters(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListsUserWithFilters", reflect.TypeOf((*MockUserFeature)(nil).GetListsUserWithFilters), ctx, filter)
}

// GetUserFeature mocks base method.
func (m *MockUserFeature) GetUserFeature(ctx context.Context, id string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFeature", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFeature indicates an expected call of GetUserFeature.
func (mr *MockUserFeatureMockRecorder) GetUserFeature(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFeature", reflect.TypeOf((*MockUserFeature)(nil).GetUserFeature), ctx, id)
}

// GetUserListsFeature mocks base method.
func (m *MockUserFeature) GetUserListsFeature(ctx context.Context, queryRequest model0.QueryRequest) (model.UserLists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListsFeature", ctx, queryRequest)
	ret0, _ := ret[0].(model.UserLists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListsFeature indicates an expected call of GetUserListsFeature.
func (mr *MockUserFeatureMockRecorder) GetUserListsFeature(ctx, queryRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListsFeature", reflect.TypeOf((*MockUserFeature)(nil).GetUserListsFeature), ctx, queryRequest)
}

// UpdateUserFeature mocks base method.
func (m *MockUserFeature) UpdateUserFeature(ctx context.Context, id string, request *model.UpdateUserRequest) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserFeature", ctx, id, request)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserFeature indicates an expected call of UpdateUserFeature.
func (mr *MockUserFeatureMockRecorder) UpdateUserFeature(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserFeature", reflect.TypeOf((*MockUserFeature)(nil).UpdateUserFeature), ctx, id, request)
}
