// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/user/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "eko-car/domain/user/model"
	model0 "eko-car/domain/shared/model"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// BulkInsertCounterRepository mocks base method.
func (m *MockUserRepository) BulkInsertCounterRepository(ctx context.Context, size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertCounterRepository", ctx, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertCounterRepository indicates an expected call of BulkInsertCounterRepository.
func (mr *MockUserRepositoryMockRecorder) BulkInsertCounterRepository(ctx, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertCounterRepository", reflect.TypeOf((*MockUserRepository)(nil).BulkInsertCounterRepository), ctx, size)
}

// CheckUserIdRepository mocks base method.
func (m *MockUserRepository) CheckUserIdRepository(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIdRepository", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserIdRepository indicates an expected call of CheckUserIdRepository.
func (mr *MockUserRepositoryMockRecorder) CheckUserIdRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIdRepository", reflect.TypeOf((*MockUserRepository)(nil).CheckUserIdRepository), ctx, id)
}

// CheckUserSKURepository mocks base method.
func (m *MockUserRepository) CheckUserSKURepository(ctx context.Context, sku string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserSKURepository", ctx, sku)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserSKURepository indicates an expected call of CheckUserSKURepository.
func (mr *MockUserRepositoryMockRecorder) CheckUserSKURepository(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserSKURepository", reflect.TypeOf((*MockUserRepository)(nil).CheckUserSKURepository), ctx, sku)
}

// DeleteUserRepository mocks base method.
func (m *MockUserRepository) DeleteUserRepository(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRepository", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRepository indicates an expected call of DeleteUserRepository.
func (mr *MockUserRepositoryMockRecorder) DeleteUserRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRepository", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserRepository), ctx, id)
}

// GetAndUpdateNumberNextRepository mocks base method.
func (m *MockUserRepository) GetAndUpdateNumberNextRepository(ctx context.Context, tx *sql.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndUpdateNumberNextRepository", ctx, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndUpdateNumberNextRepository indicates an expected call of GetAndUpdateNumberNextRepository.
func (mr *MockUserRepositoryMockRecorder) GetAndUpdateNumberNextRepository(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndUpdateNumberNextRepository", reflect.TypeOf((*MockUserRepository)(nil).GetAndUpdateNumberNextRepository), ctx, tx)
}

// GetDocNumberRangeRepository mocks base method.
func (m *MockUserRepository) GetDocNumberRangeRepository(ctx context.Context) (model.NumberRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocNumberRangeRepository", ctx)
	ret0, _ := ret[0].(model.NumberRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocNumberRangeRepository indicates an expected call of GetDocNumberRangeRepository.
func (mr *MockUserRepositoryMockRecorder) GetDocNumberRangeRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocNumberRangeRepository", reflect.TypeOf((*MockUserRepository)(nil).GetDocNumberRangeRepository), ctx)
}

// GetLastCounterRepository mocks base method.
func (m *MockUserRepository) GetLastCounterRepository(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCounterRepository", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCounterRepository indicates an expected call of GetLastCounterRepository.
func (mr *MockUserRepositoryMockRecorder) GetLastCounterRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCounterRepository", reflect.TypeOf((*MockUserRepository)(nil).GetLastCounterRepository), ctx)
}

// GetUserByIdRepository mocks base method.
func (m *MockUserRepository) GetUserByIdRepository(ctx context.Context, id int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIdRepository", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIdRepository indicates an expected call of GetUserByIdRepository.
func (mr *MockUserRepositoryMockRecorder) GetUserByIdRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIdRepository", reflect.TypeOf((*MockUserRepository)(nil).GetUserByIdRepository), ctx, id)
}

// GetUserBySKURepository mocks base method.
func (m *MockUserRepository) GetUserBySKURepository(ctx context.Context, sku string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySKURepository", ctx, sku)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySKURepository indicates an expected call of GetUserBySKURepository.
func (mr *MockUserRepositoryMockRecorder) GetUserBySKURepository(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySKURepository", reflect.TypeOf((*MockUserRepository)(nil).GetUserBySKURepository), ctx, sku)
}

// GetUserListsRepository mocks base method.
func (m *MockUserRepository) GetUserListsRepository(ctx context.Context, limit, offset int, sortby, search string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListsRepository", ctx, limit, offset, sortby, search)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListsRepository indicates an expected call of GetUserListsRepository.
func (mr *MockUserRepositoryMockRecorder) GetUserListsRepository(ctx, limit, offset, sortby, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListsRepository", reflect.TypeOf((*MockUserRepository)(nil).GetUserListsRepository), ctx, limit, offset, sortby, search)
}

// GetUserListsWithFiltersRepository mocks base method.
func (m *MockUserRepository) GetUserListsWithFiltersRepository(ctx context.Context, filter *model0.Filter, offset int) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListsWithFiltersRepository", ctx, filter, offset)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListsWithFiltersRepository indicates an expected call of GetUserListsWithFiltersRepository.
func (mr *MockUserRepositoryMockRecorder) GetUserListsWithFiltersRepository(ctx, filter, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListsWithFiltersRepository", reflect.TypeOf((*MockUserRepository)(nil).GetUserListsWithFiltersRepository), ctx, filter, offset)
}

// GetTotalUserRepository mocks base method.
func (m *MockUserRepository) GetTotalUserRepository(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalUserRepository", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalUserRepository indicates an expected call of GetTotalUserRepository.
func (mr *MockUserRepositoryMockRecorder) GetTotalUserRepository(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalUserRepository", reflect.TypeOf((*MockUserRepository)(nil).GetTotalUserRepository), ctx)
}

// GetTotalUserWithConditionsRepository mocks base method.
func (m *MockUserRepository) GetTotalUserWithConditionsRepository(ctx context.Context, conditions string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalUserWithConditionsRepository", ctx, conditions)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalUserWithConditionsRepository indicates an expected call of GetTotalUserWithConditionsRepository.
func (mr *MockUserRepositoryMockRecorder) GetTotalUserWithConditionsRepository(ctx, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalUserWithConditionsRepository", reflect.TypeOf((*MockUserRepository)(nil).GetTotalUserWithConditionsRepository), ctx, conditions)
}

// GetTotalUserWithFiltersRepository mocks base method.
func (m *MockUserRepository) GetTotalUserWithFiltersRepository(ctx context.Context, filter *model0.Filter) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalUserWithFiltersRepository", ctx, filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalUserWithFiltersRepository indicates an expected call of GetTotalUserWithFiltersRepository.
func (mr *MockUserRepositoryMockRecorder) GetTotalUserWithFiltersRepository(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalUserWithFiltersRepository", reflect.TypeOf((*MockUserRepository)(nil).GetTotalUserWithFiltersRepository), ctx, filter)
}

// InsertUserRepository mocks base method.
func (m *MockUserRepository) InsertUserRepository(ctx context.Context, product model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserRepository", ctx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserRepository indicates an expected call of InsertUserRepository.
func (mr *MockUserRepositoryMockRecorder) InsertUserRepository(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserRepository", reflect.TypeOf((*MockUserRepository)(nil).InsertUserRepository), ctx, product)
}

// UpdateUserRepository mocks base method.
func (m *MockUserRepository) UpdateUserRepository(ctx context.Context, id int, update *model.UpdateUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRepository", ctx, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRepository indicates an expected call of UpdateUserRepository.
func (mr *MockUserRepositoryMockRecorder) UpdateUserRepository(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRepository", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserRepository), ctx, id, update)
}
